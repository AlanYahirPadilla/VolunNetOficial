// Esquema de base de datos para VolunNet
// Cumple con requerimientos de PostgreSQL y Redis para caché

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================== MODELOS PRINCIPALES ===================

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  avatar      String?
  role        Role     @default(VOLUNTEER)
  verified    Boolean  @default(false)
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Verificación
  emailVerified     Boolean @default(false)
  emailVerifiedAt   DateTime?
  phoneVerified     Boolean @default(false)
  phoneVerifiedAt   DateTime?
  emailVerificationCode EmailVerificationCode?
  phoneVerificationCode PhoneVerificationCode?

  // Relaciones
  volunteer       Volunteer?
  organization    Organization?
  notifications   Notification[]
  notificationPreferences UserNotificationPreferences?
  eventApplications EventApplication[]
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  userVectors     UserVector[]
  
  // Relaciones de Chat
  createdChats    Chat[] @relation("ChatCreator")
  chatParticipants ChatParticipant[] @relation("ChatParticipants")
  chatMessages    ChatMessage[] @relation("ChatMessages")
  sentInvitations ChatInvitation[] @relation("ChatInvitationsSent")
  receivedInvitations ChatInvitation[] @relation("ChatInvitationsReceived")

  @@map("users")
}

model Volunteer {
  id                 String    @id @default(cuid())
  userId             String    @unique
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  skills             String[]
  interests          String[]
  bio                String?
  rating             Float     @default(0)
  hoursCompleted     Int       @default(0)
  eventsParticipated Int       @default(0)

  // Ubicación
  address    String?
  city       String?
  state      String?
  country    String?
  latitude   Float?
  longitude  Float?

  // Disponibilidad
  availability Availability[]

  // Datos IA
  birthDate    DateTime?
  gender       String?
  languages    String[]
  experience   String[]
  socialLinks  String[]
  cvUrl        String?
  achievements String[]
  verified     Boolean?
  references   String[]
  tagline      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("volunteers")
}

model Organization {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  name             String
  description      String
  website          String?
  verified         Boolean  @default(false)
  eventsCreated    Int      @default(0)
  volunteersHelped Int      @default(0)

  // Ubicación
  address          String?
  city             String?
  state            String?
  country          String?
  latitude         Float?
  longitude        Float?

  // Contacto
  contactEmail     String?
  contactPhone     String?
  socialLinks      String[]
  verificationDocs String[]
  preferences      String[]
  rating           Float    @default(0)
  tagline          String?

  // Relaciones
  events    Event[]

  // Categoría
  category  String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organizations")
}

model Event {
  id                String   @id @default(cuid())
  title             String
  description       String
  organizationId    String
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Ubicación
  address    String
  city       String
  state      String
  country    String
  latitude   Float
  longitude  Float

  // Fechas
  startDate  DateTime
  endDate    DateTime

  // Capacidad
  maxVolunteers     Int
  currentVolunteers Int @default(0)

  // Categorización
  skills     String[]
  categoryId String
  category   EventCategory @relation(fields: [categoryId], references: [id])

  // Estado
  status     EventStatus @default(DRAFT)

  // Detalles
  requirements String[]
  benefits     String[]
  imageUrl     String?

  // Relaciones
  applications EventApplication[]
  messages     Message[]
  chats        Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model EventCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  color       String
  active      Boolean  @default(true)
  events      Event[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("event_categories")
}

model EventApplication {
  id          String            @id @default(cuid())
  eventId     String
  volunteerId String
  status      ApplicationStatus @default(PENDING)
  appliedAt   DateTime          @default(now())
  message     String?
  rating      Int?
  feedback    String?
  completedAt DateTime?

  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  volunteer User  @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, volunteerId])
  @@map("event_applications")
}

model Availability {
  id          String    @id @default(cuid())
  volunteerId String
  dayOfWeek   Int
  startTime   String
  endTime     String
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("availability")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  NotificationCategory @default(SYSTEM)
  subcategory NotificationSubcategory?
  title     String
  message   String
  template  String?
  priority  NotificationPriority @default(NORMAL)
  status    NotificationStatus @default(PENDING)
  actionText String?
  actionUrl String?
  actionData Json?
  expiresAt DateTime?
  sentAt    DateTime?
  deliveredAt DateTime?
  readAt    DateTime?
  clickedAt DateTime?
  relatedEventId String?
  groupId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model NotificationTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  category    NotificationCategory
  subcategory NotificationSubcategory?
  
  title       String
  message     String
  actionText  String?
  
  variables   String[] // Variables del template
  priority    NotificationPriority @default(NORMAL)
  expiresIn   Int?                // Días hasta expirar
  
  language    String              @default("es")
  region      String?
  
  active      Boolean             @default(true)
  version     Int                 @default(1)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@map("notification_templates")
}

model UserNotificationPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  preferences Json    // Preferencias por categoría
  
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  inAppNotifications    Boolean @default(true)
  smsNotifications      Boolean @default(false)
  
  quietHoursStart       String?
  quietHoursEnd         String?
  timezone              String  @default("UTC")
  digestFrequency       DigestFrequency @default(DAILY)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("user_notification_preferences")
}

model Message {
  id         String      @id @default(cuid())
  eventId    String?
  senderId   String
  receiverId String
  content    String
  read       Boolean     @default(false)
  type       MessageType @default(DIRECT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  event    Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)
  sender   User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User   @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UserVector {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  features    Float[]
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("user_vectors")
}

model MLMetrics {
  id        String   @id @default(cuid())
  modelType String   // 'knn', 'random_forest', etc.
  precision Float
  recall    Float
  f1Score   Float
  accuracy  Float
  createdAt DateTime @default(now())

  @@map("ml_metrics")
}

model EmailVerificationCode {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_codes")
}

model PhoneVerificationCode {
  id        String   @id @default(cuid())
  userId    String   @unique
  phone     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("phone_verification_codes")
}

// =================== ENUMS ===================

enum Role {
  VOLUNTEER
  ORGANIZATION
  ADMIN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ONGOING
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  EVENT_UPDATE
  APPLICATION_UPDATE
  MESSAGE
}

enum NotificationCategory {
  SYSTEM
  EVENT
  APPLICATION
  RATING
  MESSAGE
}

enum NotificationSubcategory {
  WELCOME
  PROFILE_REMINDER
  APPLICATION_SUBMITTED
  APPLICATION_ACCEPTED
  APPLICATION_REJECTED
  EVENT_STARTED
  EVENT_COMPLETED
  EVENT_REMINDER
  NEW_APPLICATION
  RATING_REMINDER
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  ACTED
  EXPIRED
  ARCHIVED
}

enum DigestFrequency {
  IMMEDIATE
  HOURLY
  DAILY
  WEEKLY
}

enum MessageType {
  DIRECT
  EVENT_CHAT
  SYSTEM
}

// =================== MODELOS DE CHAT ===================

model Chat {
  id          String      @id @default(cuid())
  type        ChatType    @default(INDIVIDUAL)
  name        String?     // Para chats grupales
  description String?     // Para chats grupales
  eventId     String?     // Si es un chat de evento
  event       Event?      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdBy   String      // Usuario que creó el chat
  creator     User        @relation("ChatCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  lastMessageAt DateTime?
  
  // Relaciones
  participants ChatParticipant[]
  messages     ChatMessage[]
  invitations  ChatInvitation[]
  
  @@map("chats")
}

model ChatParticipant {
  id        String   @id @default(cuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation("ChatParticipants", fields: [userId], references: [id], onDelete: Cascade)
  role      ChatRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  lastReadAt DateTime?
  
  @@unique([chatId, userId])
  @@map("chat_participants")
}

model ChatMessage {
  id        String      @id @default(cuid())
  chatId    String
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User        @relation("ChatMessages", fields: [senderId], references: [id], onDelete: Cascade)
  content   String
  type      MessageType @default(DIRECT)
  metadata  Json?       // Para archivos, imágenes, etc.
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  // Para mensajes editados o eliminados
  editedAt   DateTime?
  deletedAt DateTime?
  
  @@map("chat_messages")
}

model ChatInvitation {
  id          String           @id @default(cuid())
  chatId      String
  chat        Chat             @relation(fields: [chatId], references: [id], onDelete: Cascade)
  inviterId   String
  inviter     User             @relation("ChatInvitationsSent", fields: [inviterId], references: [id], onDelete: Cascade)
  inviteeId   String
  invitee     User             @relation("ChatInvitationsReceived", fields: [inviteeId], references: [id], onDelete: Cascade)
  status      InvitationStatus @default(PENDING)
  message     String?          // Mensaje personalizado del invitador
  createdAt   DateTime         @default(now())
  respondedAt DateTime?
  expiresAt   DateTime?
  
  @@unique([chatId, inviteeId])
  @@map("chat_invitations")
}

enum ChatType {
  INDIVIDUAL  // Chat 1 a 1
  GROUP       // Chat grupal
  EVENT       // Chat de evento específico
  COMMUNITY   // Chat de comunidad general
}

enum ChatRole {
  ADMIN       // Puede administrar el chat
  MODERATOR   // Puede moderar mensajes
  MEMBER      // Miembro regular
}

enum InvitationStatus {
  PENDING     // Invitación pendiente
  ACCEPTED    // Invitación aceptada
  DECLINED    // Invitación rechazada
  EXPIRED     // Invitación expirada
}